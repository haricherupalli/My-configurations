" Header {{{1
" URL: http://vim.wikia.com/wiki/Example_vimrc
" Authors: http://vim.wikia.com/wiki/Vim_on_Freenode
" Description: A minimal, but feature rich, example .vimrc. If you are a
"              newbie, basing your first .vimrc on this file is a good choice.
"              If you're a more advanced user, building your own .vimrc based
"              on this file is still a good idea.

"------------------------------------------------------------
" Features {{{1
"
" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

scriptencoding utf-8
set termencoding=utf-8
set encoding=utf-8
setglobal fileencoding=utf-8

"Set the filetype for cuda files as c. cuda is a defined filetype in vim. But
"it doesn't seem to work properly
au BufRead,BufNewFile *.cu set filetype=c
au BufWinLeave * mkview
au BufWinEnter * silent loadview
" Enable syntax highlighting
syntax on

" This file has been added to the vim/plugin folder hence commenting it out
"source  cscope_maps.vim
"LEADER
:let mapleader = ","
:let maplocalleader = ","
"------------------------------------------------------------
" Must have options {{{1
"
" These are highly recommended options.

" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
"
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.

"set hidden

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the same
" window as mentioned above, and/or either of the following options:
" set confirm
" set autowriteall

" Better command-line completion
set wildmenu

"This option seems not to be supported. This option sets the ALT key for vim
"use only and not for the window manager of the OS for opening file, edit etc
"menus
" set winaltkeys no

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch
"Incremental search on /
set incsearch

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline


"------------------------------------------------------------
" Usability options {{{1
"
" These are options that users frequently set in their .vimrc. Some of them
" change Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start
set t_kb=

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2
set statusline+=%F\ -\ FileType:\ %y

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>


"Fold method set default to syntax
set foldmethod=syntax


"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=2
set softtabstop=2
set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" two characters wide.
"set shiftwidth=2
"set tabstop=2


"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-n> :nohl<CR><C-L>
nnoremap <silent> <leader>/ :nohlsearch<cr>
"------------------------------------------------------------
" CHANGES BY HARI {{{1
" There are changes in other sections also by Hari. This section is mainly
" mappings

" ,t for opening file under cursor or new file in new tab
nnoremap ,t <Esc>:tabnew<CR>

"  V for explore in vertical
:command! V Vexplore

"This command creates a new file in the explore mode's open directory. Just
"press F and type the file new. There will be some text already printed there,
"don't bother.
:noremap F :cd %:p:h <Bar> new<Space>

" This maps C to scrollbind and toggles it
:noremap C :set scrollbind!<CR>

"Line Movements \m/"{{{
"Move line down by one line. Won't work at the last line
:nnoremap <silent> <c-j> :m .+1<cr>
""Move line up by one line
:nnoremap <silent> <c-k> :m .-2<cr>
"Move line to the right by tab space
:nnoremap <silent> <c-l> >>
"Move line to the left by tab space
:nnoremap <silent> <c-h> <<
"}}}

"Visual Block Movements"{{{
vnoremap <silent> <c-j> :m '>+1<cr>gv=gv
vnoremap <silent> <c-k> :m '<-2<cr>gv=gv
"}}}


"sourceing and opening vimrc
:nnoremap <leader>sv :source $MYVIMRC<cr>:nohlsearch<cr>
:nnoremap <leader>ev :vsplit $MYVIMRC<cr>

"Change to upper case
:inoremap <c-u> <esc>viwU<esc>li
:nnoremap <c-u> viwU<esc>

"Setting H and L to line ends
:nnoremap H 0
:nnoremap L $

"Select word under cursor in visual mode
:nnoremap <leader>w viw

"LANGUAGE SPECIFIC STUFF"{{{
"PRINTF,PRINT, $DISPLAY "{{{
:autocmd FileType c,cpp nnoremap <buffer> <localleader>p <esc>iprintf(" \n");<esc>==f;hhhhh
:autocmd FileType c,cpp inoremap <buffer> <localleader>p <esc>iprintf(" \n");<esc>==f;hhhhhi
:autocmd FileType verilog,verilog_systemverilog inoremap <buffer> <localleader>d <esc>i$display(" \n");<esc>==f;hhhhhi
:autocmd FileType verilog,verilog_systemverilog nnoremap <buffer> <localleader>d <esc>i$display(" \n");<esc>==f;hhhhhi
:autocmd FileType verilog,verilog_systemverilog inoremap <buffer> <localleader>f <esc>i$finish;<esc>==
:autocmd FileType verilog,verilog_systemverilog nnoremap <buffer> <localleader>f <esc>i$finish;<esc>==
"}}}
"#INCLUDE"{{{
:autocmd FileType c,cpp inoremap <buffer> <localleader>in <esc>i#include <><esc>i
:autocmd FileType c,cpp nnoremap <buffer> <localleader>in <esc>i#include <><esc>i
:autocmd FileType verilog,verilog_systemverilog nnoremap <buffer> <localleader>in <esc>i`include ""<esc>i
"}}}
"IF"{{{
:autocmd FileType c,cpp nnoremap <buffer> <localleader>if <esc>iif ()<cr>{<cr><cr>}<esc>kkk$i
"}}}
"ELSE"{{{
:autocmd FileType c,cpp nnoremap <buffer> <localleader>el <esc>ielse<cr>{<cr><cr>}<esc>k
"}}}
"FOR"{{{
:autocmd FileType c,cpp nnoremap <buffer> <localleader>fo <esc>ifor()<cr>{<cr><cr>}<esc>kkk$
"}}}
"WHILE"{{{
:autocmd FileType c,cpp nnoremap <buffer> <localleader>wh <esc>iwhile()<cr>{<cr><cr>}<esc>kkk$
"}}}
"COMMENTS"{{{
"Comments a single line
:autocmd FileType python,perl,sh,csh,zsh,bash,conf,make nnoremap <buffer> <localleader>c mqI#<esc>`q
:autocmd FileType vim nnoremap <buffer> <localleader>c mqI"<esc>`q
:autocmd FileType c,verilog,cpp,verilog_systemverilog  nnoremap <buffer> <localleader>c mqI//<esc>`q
"uncomments a single line
:autocmd FileType c,cpp,verilog,verilog_systemverilog nnoremap <buffer> <localleader>C mq:s/^\s*\/\///<cr>==`q:nohl<cr>
:autocmd FileType vim nnoremap <buffer> <localleader>C mq:s/^\s*"//<cr>`q:nohl<cr>
:autocmd FileType perl,python,csh,zsh,bash,sh,conf,make nnoremap <buffer> <localleader>C mq:s/^\s*#//<cr>`q:nohl<cr>
"Comments a select visual block
:autocmd FileType c,cpp,verilog,verilog_systemverilog vnoremap <buffer> <localleader>c :s/^/\/\//<cr>:nohl<cr>
:autocmd FileType vim vnoremap <buffer> <localleader>c :s/^/"/<cr>:nohl<cr>
:autocmd FileType perl,python,csh,zsh,bash,sh,conf,make vnoremap <buffer> <localleader>c :s/^/#/<cr>:nohl<cr>
:autocmd FileType c,cpp,verilog,verilog_systemverilog vnoremap <buffer> <localleader>wc <esc>'>$a*/<esc>'<i/*<esc>'>
"Uncomments a select visual block
:autocmd FileType c,cpp,verilog,verilog_systemverilog vnoremap <buffer> <localleader>C :s/^\s*\/\///<cr>:nohl<cr>
:autocmd FileType vim vnoremap <buffer> <localleader>C :s/^\s*"//<cr>:nohl<cr>
:autocmd FileType perl,python,csh,zsh,bash,sh,conf,make vnoremap <buffer> <localleader>C :s/^\s*#//<cr>:nohl<cr>
:autocmd FileType c,cpp,verilog,verilog_systemverilog vnoremap <localleader>uwc <esc>'>$:s/\*\///<cr>'<:s/\/\*//<cr>
"Uncomments a block
:autocmd FileType c nnoremap <localleader>uwc <esc>ma?\/\*<cr>mq%hxx`qxx`a
:autocmd FileType cpp nnoremap <localleader>uwc <esc>ma?\/\*<cr>mq%hxx`qxx`a
"}}}
"EOL ;"{{{
":nnoremap <leader>;  :execute "normal! mqA;\<esc>`q"
:autocmd FileType c,cpp,verilog,verilog_systemverilog nnoremap <buffer> <localleader>; mqA;<esc>`q
:autocmd FileType perl nnoremap <buffer> <localleader>; mqA;<esc>`q
"}}}
"FILE PAIRINGS"{{{
nnoremap <leader>aa <esc>:AA<cr>
nnoremap <leader>av <esc>:AV<cr>
nnoremap <leader>as <esc>:AS<cr>
"}}}
"}}}

:nnoremap <leader>V <esc>:V<cr>
:nnoremap <leader>v <esc>:vs<cr>
:inoremap <leader>V <esc>:V<cr>
:nnoremap <leader>S <esc>:Sexplore<cr>
:inoremap <leader>S <esc>:Sexplore<cr>
:noremap <localleader>sm <esc>:set modifiable<cr>
"Operator mappings. I.e., motion commands like dw, d$ etc.
"Whatever is inside () or "" or {}
:onoremap ( i(
:onoremap " i"
:onoremap { i{
:onoremap < i<
"Till you find }. for some reason } instead of b does not work
:onoremap b /}<cr>

"inside next () and inside last ()
:onoremap in( :<c-u>normal! F(vi(<cr>
:onoremap il( :<c-u>normal! F)vi(<cr>

:nnoremap <leader>sfm :set foldmethod=marker<cr>
:nnoremap <leader>sfs :set foldmethod=syntax<cr>

"CHANGES MADE ON MSI"{{{
:nnoremap gvf :vertical wincmd f<cr>
:nnoremap gsf :wincmd f<cr>j
:nnoremap <leader>b :buffers<CR>:buffer<Space>
:nnoremap <leader>bs :buffers<CR>:sbuffer<Space>
:nnoremap <leader>bv :buffers<CR>:vertical sbuffer<Space>
"maximize current window both ways in one shot
:nnoremap <c-w>m :res<cr>:vertical res<cr>
:nnoremap <c-w>M <c-w>=
"}}}

"DIFFS AND COLORSCHEMES"{{{
function! DiffToggle()
  if &diff
    :windo diffoff
    colorscheme default
  else
    :windo diffthis
    colorscheme peaksea
endif
:endfunction
nnoremap <silent> <leader>df :call DiffToggle()<cr>
nnoremap <silent> <leader>du :diffupdate<cr>
"}}}

"TRAILING WHITE SPACES"{{{
function! TrimWhiteSpace()
%s/\s\+$//e
endfunction

match ErrorMsg '\s\+$'
nnoremap <leader>rtw mq:call TrimWhiteSpace()<cr>`q

autocmd FileType c,cpp,python,java,vim,perl,conf,verilog,verilog_systemverilog autocmd FileWritePre * :call TrimWhiteSpace()
autocmd FileType c,cpp,python,java,vim,perl,conf,verilog,verilog_systemverilog autocmd FileAppendPre * :call TrimWhiteSpace()
autocmd FileType c,cpp,python,java,vim,perl,conf,verilog,verilog_systemverilog autocmd FilterWritePre * :call TrimWhiteSpace()
autocmd FileType c,cpp,python,java,vim,perl,conf,verilog,verilog_systemverilog autocmd BufWritePre * :call TrimWhiteSpace()
"}}}

"set showbreak=▷"↪

:vnoremap <leader>a <esc>:'<,'>Align

"------------------------------------------------------------"
